#!/usr/bin/env bash
# mmconfig
# set up variables for microservices, has option for a graphical user interface
CONFIG="Y"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

funcrdoCreate() {
  RDO_VAR_NAME="${1}"
  RDO_NAME="${2}"
  cat <<GTK_RAD
<label>${RDO_NAME}</label>
  <variable>${RDO_VAR_NAME}</variable>
</radiobutton>
GTK_RAD
}

funcDirectory() {
    DIR_VAR_NAME="${1}"
    DIR_VAR_VALUE="${!1}"
    if [[ -n "${DIR_VAR_VALUE}" ]] ;
    then DIR_DEFAULT="<default>${DIR_VAR_VALUE}</default>"
    fi
    cat << GTK_PART
<frame ${DIR_VAR_NAME}>
    <hbox>
        <entry accept="directory" fs-entry="Select a Directory">
            ${DIR_DEFAULT}
            <variable>${DIR_VAR_NAME}</variable>
        </entry>
        <button>
            <input file stock="gtk-open"></input>
            <variable>DIRBROWSE</variable>
            <action type="fileselect">${DIR_VAR_NAME}</action>
        </button>
    </hbox>
</frame>
GTK_PART
}

funcEntry(){
  ENTRY_VAR_NAME="${1}"
  ENTRY_VAR_VALUE="${!1}"
  ENTRY_LABEL="${2}"
  ENTRY_WIDTH="${3}"
  if [[ -n "${ENTRY_VAR_VALUE}" ]] ;
  then ENTRY_DEFAULT="<default>${ENTRY_VAR_VALUE}</default>"
  fi
  cat << GTK_ENTRY
<vbox>
  <text wrap="true" width-chars="${ENTRY_WIDTH}" xalign="0">
    <label>${ENTRY_LABEL}</label>
  </text>
  <entry>
    <variable>${ENTRY_VAR_NAME}</variable>
    ${ENTRY_DEFAULT}
    </entry>
</vbox>
GTK_ENTRY
}


export MAIN_DIALOG=$(cat << MAIN_FORM
  <window title="mmconfig configuration" resizable="false" window_position="1">
    <vbox>
      <text>
        <label>Set up mmconfig variables</label>
      </text>
      <frame Navigate to and select the directories you have created>
        <hbox>
          $(funcDirectory OUTDIR_INGESTFILE)
          $(funcDirectory OUTDIR_INGESTXDCAM)
          $(funcDirectory OUTDIR_PAPER)
          $(funcDirectory AIP_STORAGE)
          $(funcDirectory PODCASTDELIVER)
        </hbox>
        <hbox>
          $(funcDirectory YOUTUBEDELIVER)
          $(funcDirectory TMPDIR)
          $(funcDirectory CUSTOM_LOG_DIR)
          $(funcDirectory LTO_INDEX_DIR)
          $(funcDirectory LOCAL_MM_DIR)
        </hbox>
      </frame>
      <frame>
        <hbox homogeneous="true">
          $(funcEntry REGEX4PODCAST "Enter the regular expression you would like to use to determine if a file qualifies for podcast:" "80")
          $(funcEntry REGEX4IA "Enter the regular expression you would like to use to upload to the Internet Archive:" "80")
        </hbox>
        <hbox homogeneous="true">
          $(funcEntry OMNEONIP "Please enter the IP address for the server where you would like assets to be delivered:" "80")
          $(funcEntry OMNEONPATH "Please enter the file path for the server where you would like assets to be delivered:" "80")
        </hbox> 
        <hbox homogeneous="true">
          $(funcEntry LTO_MD5_FLAGS "Please select the flags you would like md5deep to use (ex: md5deep -rel):" "80")
          $(funcEntry FILE_MAKER_DB "Please enter the name of the filemaker database:" "80")
        </hbox>
        <hbox space-fill="false">
          <text wrap="false" width-chars="60" xalign="0">
            <label>Please choose Y or N to test and adjust volume during transcoding:</label>
          </text>
          <vbox>
            <radiobutton>
              $(funcrdoCreate VOLADJUSTY "Y")
            <radiobutton active="true">
              $(funcrdoCreate VOLADJUSTN "N")
          </vbox>
          $(funcEntry DVDLABELPREFIX "Please enter the prefix you would like added to the filename in makedvd. You may leave this blank:" "80")
        </hbox>
        <hbox space-expand="true">
          <text>
            <label>Please choose Y or N to enable database logging:</label>
          </text>
          <vbox>
            <radiobutton>
              <action>if true enable:PREMIS_PROFILE</action>
              <action>if true enable:PREMIS_NAME</action>
              $(funcrdoCreate PREMIS_DBY "Y")
            <radiobutton active="true">
              <action>if true disable:PREMIS_PROFILE</action>
              <action>if true disable:PREMIS_NAME</action>
              $(funcrdoCreate PREMIS_DBN "N")
          </vbox>
          $(funcEntry PREMIS_PROFILE "Enter the name of the database profile:" "60")
          $(funcEntry PREMIS_NAME "Enter the name of the database:" "60")
        </hbox>
        <hbox>
          <checkbox>
            <label>Auto update MySQL .plist?</label>
            <variable>PREMIS_PLIST</variable>
          </checkbox>
          <checkbox>
            <label>Generate video fingerprint?</label>
            <variable>PERCEPTUAL_HASH</variable>
          </checkbox>
        </hbox>
      </frame>
      <frame Email Settings>
        <hbox homogeneous="true">
          $(funcEntry EMAIL_FROM "Please enter the email account that notifications will be sent from:" "80")
          $(funcEntry SQL_ERROR_EMAIL_TO "Please the email account for the delivery of SQL Error Reports:" "80")
        </hbox>
        <hbox homogeneous="true">
          $(funcEntry MAKEBROADCAST_DELIVERY_EMAIL_TO "Please enter the email account (or multiple accounts separated by a comma) makebroadcast notifications will be delivered to:" "80")
          $(funcEntry MAKEYOUTUBE_DELIVERY_EMAIL_TO "Please enter the email account (or multiple accounts separated by a comma) makeyoutube notifications will be delivered to:" "80")
        </hbox>
      </frame>
      <hbox>
        <button ok></button>
        <button cancel></button>
      </hbox>
   </vbox>
  </window>
MAIN_FORM
)

if EXIT="OK" ;
  then GTK_OUTPUT="$(gtkdialog --program=MAIN_DIALOG | sort)"
  echo "${GTK_OUTPUT}" | sed 's:VOLADJUSTY="true":VOLADJUST="Y":g'';''s:VOLADJUSTN="false"::g'';''s:VOLADJUSTN="true":VOLADJUST="N":g'';''s:VOLADJUSTY="false"::g'';''s:PREMIS_DBY="true":PREMIS_DB="Y":g'';''s:PREMIS_DBN="false"::g'';''s:PREMIS_DBN="true":PREMIS_DB="N":g'';''s:PREMIS_DBY="false"::g'';''s:EXIT="OK"::g'';' | sort > "${MM_CONFIG_FILE}"
  echo "${MM_CONFIG_FILE}"
fi



idth = 270
LTO_INDEX_DIR.default = ${LTO_INDEX_DIR}

# LTO_MD5_FLAGS
LTO_MD5_FLAGS.x = 600
LTO_MD5_FLAGS.y = 250
LTO_MD5_FLAGS.type = textfield
LTO_MD5_FLAGS.label = Please select the flags you would like md5deep to use. ex md5deep -rel
LTO_MD5_FLAGS.width = 125
LTO_MD5_FLAGS.defualt = ${LTO_MD5_FLAGS}

# LOCAL_MM_DIR
LOCAL_MM_DIR.x = 600
LOCAL_MM_DIR.y = 500
LOCAL_MM_DIR.type = openbrowser
LOCAL_MM_DIR.label = Please navigate to and select the LOCAL_MM_DIR directory that you've created:
LOCAL_MM_DIR.width = 270
LOCAL_MM_DIR.default = ${LOCAL_MM_DIR}

# EMAIL_FROM
EMAIL_FROM.x = 600
EMAIL_FROM.y = 450
EMAIL_FROM.type = textfield
EMAIL_FROM.label = Please enter the email account that notifications will be sent from:
EMAIL_FROM.width = 125
EMAIL_FROM.default = ${EMAIL_FROM}

# MAKEYOUTUBE_DELIVERY_EMAIL_TO
MAKEYOUTUBE_DELIVERY_EMAIL_TO.x = 600
MAKEYOUTUBE_DELIVERY_EMAIL_TO.y = 400
MAKEYOUTUBE_DELIVERY_EMAIL_TO.type = textfield
MAKEYOUTUBE_DELIVERY_EMAIL_TO.label = Please enter the email account (or multiple accounts separated by a comma) makeyoutube notifications will be delivered to:
MAKEYOUTUBE_DELIVERY_EMAIL_TO.width = 125
MAKEYOUTUBE_DELIVERY_EMAIL_TO.default = ${MAKEYOUTUBE_DELIVERY_EMAIL_TO}

# MAKEBROADCAST_DELIVERY_EMAIL_TO
MAKEBROADCAST_DELIVERY_EMAIL_TO.x = 600
MAKEBROADCAST_DELIVERY_EMAIL_TO.y = 350
MAKEBROADCAST_DELIVERY_EMAIL_TO.type = textfield
MAKEBROADCAST_DELIVERY_EMAIL_TO.label = Please enter the email account (or multiple accounts separated by a comma) makebroadcast notifications will be delivered to:
MAKEBROADCAST_DELIVERY_EMAIL_TO.width = 125
MAKEBROADCAST_DELIVERY_EMAIL_TO.default = ${MAKEBROADCAST_DELIVERY_EMAIL_TO}

# FILE_MAKER_DB
FILE_MAKER_DB.x = 600
FILE_MAKER_DB.y = 300
FILE_MAKER_DB.type = textfield
FILE_MAKER_DB.label = Please enter the name of the filemaker database:
FILE_MAKER_DB.width = 125
FILE_MAKER_DB.default = ${FILE_MAKER_DB}

# SQL_ERROR_EMAIL_TO
SQL_ERROR_EMAIL_TO.x = 600
SQL_ERROR_EMAIL_TO.y = 200
SQL_ERROR_EMAIL_TO.type = textfield
SQL_ERROR_EMAIL_TO.label = Please the email account for the delivery of SQL Error Reports:
SQL_ERROR_EMAIL_TO.width = 125
SQL_ERROR_EMAIL_TO.default = ${SQL_ERROR_EMAIL_TO}

# VOLADJUST
VOLADJUST.x = 600
VOLADJUST.y = 100
VOLADJUST.type = radiobutton
VOLADJUST.label = Please choose either Y or N to test and adjust volume during transcoding:
VOLADJUST.option = Y
VOLADJUST.option = N
VOLADJUST.width = 75
VOLADJUST.default = ${VOLADJUST}

#PREMIS_DB
PREMIS_DB.x = 600
PREMIS_DB.y = 20
PREMIS_DB.type = radiobutton
PREMIS_DB.label = Please choose Y or N to enable database logging:
PREMIS_DB.option = Y
PREMIS_DB.option = N
PREMIS_DB.width = 125
PREMIS_DB.default = ${PREMIS_DB}

#PREMIS_PROFILE
PREMIS_PROFILE.x = 650
PREMIS_PROFILE.y = 10
PREMIS_PROFILE.type = textfield
PREMIS_PROFILE.label = Enter name of database profile:
PREMIS_PROFILE.option = Y
PREMIS_PROFILE.option = N
PREMIS_PROFILE.width = 125
PREMIS_PROFILE.default = ${PREMIS_PROFILE}

#PREMIS_NAME
PREMIS_NAME.x = 920
PREMIS_NAME.y = 10
PREMIS_NAME.type = textfield
PREMIS_NAME.label = Enter name of database:
PREMIS_NAME.option = Y
PREMIS_NAME.option = N
PREMIS_NAME.width = 125
PREMIS_NAME.default = ${PREMIS_NAME}

#PREMIS_PLIST
PREMIS_PLIST.x = 1050
PREMIS_PLIST.y = 60
PREMIS_PLIST.type = checkbox
PREMIS_PLIST.label = Auto update MySQL .plist?
PREMIS_PLIST.tooltip = If activated this will try to to modify MySQL .plist file to enable outside connections when mm is updated.
PREMIS_PLIST.default = ${PREMIS_PLIST}

#PERCEPTUAL_HASH
PERCEPTUAL_HASH.x = 1050
PERCEPTUAL_HASH.y = 115
PERCEPTUAL_HASH.type = checkbox
PERCEPTUAL_HASH.label = Generate video fingerprint?
PERCEPTUAL_HASH.tooltip = This will create perceptual fingerprints of the input video stream.
PERCEPTUAL_HASH.default = ${PERCEPTUAL_HASH}

# Add a cancel button with default label
cb.type=cancelbutton

";

# if a config file does not exist, create one using this GUI
if [[ "${RUNPASHUA}" = "Y" ]] ; then
    PASHUA_CONFIGFILE=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    if [ "${PASHUAFAIL}" = "Y" ] ; then
        echo "Pashua is not installed.  Opening via CLI."
        sleep 1
        exec $(basename "${0}") -t
    else
        echo "  OUTDIR_INGESTFILE = ${OUTDIR_INGESTFILE}"
        echo "  OUTDIR_INGESTXDCAM = ${OUTDIR_INGESTXDCAM}"
        echo "  OUTDIR_PAPER = ${OUTDIR_PAPER}"
        echo "  AIP_STORAGE = ${AIP_STORAGE}"
        echo "  PODCASTDELIVER = ${PODCASTDELIVER}"
        echo "  YOUTUBEDELIVER = ${YOUTUBEDELIVER}"
        echo "  TMPDIR = ${TMPDIR}"
        echo "  REGEX4PODCAST = ${REGEX4PODCAST}"
        echo "  REGEX4IA = ${REGEX4IA}"
        echo "  DVDLABELPREFIX = ${DVDLABELPREFIX}"
        echo "  OMNEONIP = ${OMNEONIP}"
        echo "  OMNEONPATH = ${OMNEONPATH}"
        echo "  CUSTOM_LOG_DIR = ${CUSTOM_LOG_DIR}"
        echo "  LTO_INDEX_DIR = ${LTO_INDEX_DIR}"
        echo "  LTO_MD5_FLAGS = ${LTO_MD5_FLAGS}"
        echo "  LOCAL_MM_DIR = ${LOCAL_MM_DIR}"
        echo "  EMAIL_FROM = ${EMAIL_FROM}"
        echo "  MAKEYOUTUBE_DELIVERY_EMAIL_TO = ${MAKEYOUTUBE_DELIVERY_EMAIL_TO}"
        echo "  MAKEBROADCAST_DELIVERY_EMAIL_TO = ${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
        echo "  FILE_MAKER_DB = ${FILE_MAKER_DB}"
        echo "  SQL_ERROR_EMAIL_TO = ${SQL_ERROR_EMAIL_TO}"
        echo "  VOLADJUST = ${VOLADJUST}"
        echo "  PREMIS_DB = ${PREMIS_DB}"
        echo "  PREMIS_PROFILE = ${PREMIS_PROFILE}"
        echo "  PREMIS_NAME = ${PREMIS_NAME}"
        echo "  PREMIS_PLIST = ${PREMIS_PLIST}"
        echo "  PERCEPTUAL_HASH = ${PERCEPTUAL_HASH}"
        echo
    fi
    #write to the config file
    {
        echo "OUTDIR_INGESTFILE=\"${OUTDIR_INGESTFILE}\""
        echo "OUTDIR_INGESTXDCAM=\"${OUTDIR_INGESTXDCAM}\""
        echo "OUTDIR_PAPER=\"${OUTDIR_PAPER}\""
        echo "AIP_STORAGE=\"${AIP_STORAGE}\""
        echo "PODCASTDELIVER=\"${PODCASTDELIVER}\""
        echo "YOUTUBEDELIVER=\"${YOUTUBEDELIVER}\""
        echo "TMPDIR=\"${TMPDIR}\""
        echo "REGEX4PODCAST=\"${REGEX4PODCAST}\""
        echo "REGEX4IA=\"${REGEX4IA}\""
        echo "DVDLABELPREFIX=\"${DVDLABELPREFIX}\""
        echo "OMNEONIP=\"${OMNEONIP}\""
        echo "OMNEONPATH=\"${OMNEONPATH}\""
        echo "CUSTOM_LOG_DIR=\"${CUSTOM_LOG_DIR}\""
        echo "LTO_INDEX_DIR=\"${LTO_INDEX_DIR}\""
        echo "LTO_MD5_FLAGS=\"${LTO_MD5_FLAGS}\""
        echo "LOCAL_MM_DIR=\"${LOCAL_MM_DIR}\""
        echo "EMAIL_FROM=\"${EMAIL_FROM}\""
        echo "MAKEYOUTUBE_DELIVERY_EMAIL_TO=\"${MAKEYOUTUBE_DELIVERY_EMAIL_TO}\""
        echo "MAKEBROADCAST_DELIVERY_EMAIL_TO=\"${MAKEBROADCAST_DELIVERY_EMAIL_TO}\""
        echo "FILE_MAKER_DB=\"${FILE_MAKER_DB}\""
        echo "SQL_ERROR_EMAIL_TO=\"${SQL_ERROR_EMAIL_TO}\""
        echo "VOLADJUST=\"${VOLADJUST}\""
        echo "PREMIS_DB=\"${PREMIS_DB}\""
        echo "PREMIS_PROFILE=\"${PREMIS_PROFILE}\""
        echo "PREMIS_NAME=\"${PREMIS_NAME}\""
        echo "PREMIS_PLIST=\"${PREMIS_PLIST}\""
        echo "PERCEPTUAL_HASH=\"${PERCEPTUAL_HASH}\""
    } > "${MM_CONFIG_FILE}"
else
    # set up configuration file using the command line
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        _add_key "${KEY}"
    done

    _report -d "(basename "${0}")"
    _report -d "Set system variables for mediamicroservices"
    echo
    _report -d "Notes:"
    _report -d "VOLADJUST must be set to 'Y' or 'N'"
    echo
    _report -d "Testing ${MM_CONFIG_FILE} validity"
    _test_config
    echo

    _report -d "Table of existing variables:"
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        VALUE=$(grep "^${KEY}=" "${MM_CONFIG_FILE}" | cut -d= -f2)
        printf '\t%-40s %-40s\n' "${KEY}" "${VALUE}"
    done
    while true ; do
        EDITOPTION1="Edit config file in nano"
        EDITOPTION2="Edit config file in TextMate"
        _report -q "Edit a variable? "
        PS3="Selection (enter by number)? "
        select CONFIG_KEY in "${EDITOPTION1}" "${EDITOPTION2}" "${REQUIRED_VARIABLES[@]}" "Quit" ; do
            break
        done
        [ "${CONFIG_KEY}" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION1}" ] && { nano "${MM_CONFIG_FILE}" ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION2}" ] && { mate "${MM_CONFIG_FILE}" ; exit 1 ;};
        echo -n "Enter the value for ${CONFIG_KEY}: "
        read -e "CONFIG_VALUE"
        echo "${CONFIG_KEY} is now set to ${CONFIG_VALUE}"
        _config_edit "${CONFIG_KEY}" "${CONFIG_VALUE}"
    done

fi
